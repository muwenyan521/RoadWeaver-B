plugins {
	id 'com.gradleup.shadow' version '8.3.6'
}

architectury {
	platformSetupLoomIde()
	neoForge()
}

loom {
	// 访问转换器配置
	accessWidenerPath = project(':common').loom.accessWidenerPath
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin since it conflicts with Loom.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common
}

// 添加生成的资源到主资源集
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven { 
		url "https://maven.shedaniel.me/" 
		name "Shedaniel Maven"
	}
}

dependencies {
	// Common 模块
	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
	
	// Architectury API
	modImplementation("dev.architectury:architectury-neoforge:13.0.8")
	
	// Cloth Config API for NeoForge (可选)
	modCompileOnly "me.shedaniel.cloth:cloth-config-neoforge:15.0.140"
	modRuntimeOnly "me.shedaniel.cloth:cloth-config-neoforge:15.0.140"
}

// 处理资源文件
tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
		minecraft_version: '1.21.1',
		minecraft_version_range: '[1.21.1,1.22)',
		neoforge_version: '21.1',
		neoforge_version_range: '[21.1,22)',
		loader_version_range: '[4,)',
		mod_id: 'settlementroads',
		mod_name: 'RoadWeaver',
		mod_version: project.version,
		mod_authors: 'Countered',
		mod_description: 'Automatically generates roads between structures'
	]
	
	inputs.properties replaceProperties
	
	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties
	}
}

shadowJar {
	exclude "architectury.common.json"
	exclude "fabric.mod.json"
	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set("dev-shadow")
}

remapJar {
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set(null)
}

jar {
	archiveClassifier.set("dev")
	from("${rootProject.projectDir}/LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
	
	manifest {
		attributes([
			'Specification-Title'     : 'RoadWeaver',
			'Specification-Vendor'    : 'Countered',
			'Specification-Version'   : '1',
			'Implementation-Title'    : project.name,
			'Implementation-Version'  : project.version,
			'Implementation-Vendor'   : 'Countered',
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

sourcesJar {
	def commonSources = project(':common').sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

// Maven 发布
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = "${rootProject.name}-neoforge"
			from components.java
		}
	}
	repositories {
		// 添加发布仓库
	}
}
